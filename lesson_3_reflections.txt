When you would you want to create a remote repository rather than keeping all your work local?

You'd create a remote repository if other people are making commits, or if you want to make commits from a machine other than your local


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If you have changes in your local working directory, changes in your local staging area, or if there commits on your local that you haven't pushed to the remote before an automatic pull, there will be conflict.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

A clone makes a copy of one repository to another location. 
A fork is a clone, but on GitHub, from one repo to your repo
A branch is done only to one repository.

The clone and fork are for making copies of whole repositories from one location to another. A branch is a local copy of a set of commits that you may want to merge with later. You would use a branch to experiment with a new feature or work on fixing a bug in your own repository. If someone wanted to fix a bug in a repository they don't own, they could do a fork.

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit of having a copy of the last known state if the remote stored locally is this enables a merge between the copy and local HEAD. This makes it easier to resolve conflicts where updates are made to the local and remote separately. It turns it back into merging local branches.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git or GitHub, you could use email or Slack to collaborate and send changes. For solo projects, you could just keep renaming code files perhaps with the date appended, so you could track changes, and rollback if needed.

For small projects with few or no collaborators, a simple file system might be easier. 
FOr larger project with more collaborators, it would be hard to merge all the changes together on a frequent basis.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

You would want to make changes in a separate branch when you are collaborating with others, and you would like control over what changes get into the master. It's a way of preventing changes getting into the master branch without the repository owner knowing.